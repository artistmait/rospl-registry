{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "line-chart",
  "type": "registry:block",
  "title": "Line Chart",
  "description": "A nice Line Chart",
  "dependencies": [
    "recharts"
  ],
  "files": [
    {
      "path": "src/registry/neutral/blocks/LineChart.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, { memo, useMemo } from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  Legend,\r\n} from \"recharts\";\r\n\r\nexport interface LineChartDataPoint {\r\n  [key: string]: string | number;\r\n}\r\n\r\ninterface LineChartProps {\r\n  data: LineChartDataPoint[];\r\n  xKey: string;\r\n  lineKeys: string[];\r\n  width?: number | string;\r\n  height?: number;\r\n  lineColors?: string[];\r\n  gridColor?: string;\r\n  bgColor?: string;\r\n  showLegend?: boolean;\r\n  showTooltip?: boolean;\r\n  title?: string;\r\n  className?: string;\r\n}\r\n\r\nconst defaultColors = [\"#c0daed\", \"#e1e5ed\", \"#f2f3f5\", \"#D1D5DB\"]; // black–grey–white shades\r\n\r\nconst LineChartComponent: React.FC<LineChartProps> = ({\r\n  data,\r\n  xKey,\r\n  lineKeys,\r\n  width = \"100%\",\r\n  height = 300,\r\n  lineColors,\r\n  gridColor = \"#E5E7EB\", // light grey\r\n  bgColor = \"#FFFFFF\", // pure white\r\n  showLegend = true,\r\n  showTooltip = true,\r\n  title,\r\n  className = \"\",\r\n}) => {\r\n  const colors = useMemo(\r\n    () => (lineColors?.length ? lineColors : defaultColors),\r\n    [lineColors]\r\n  );\r\n\r\n  // Defensive: empty state\r\n  if (!data || data.length === 0) {\r\n    return (\r\n      <div\r\n        className={`rounded-2xl shadow-sm p-4 flex items-center justify-center ${className}`}\r\n        style={{\r\n          backgroundColor: \"#FFFFFF\",\r\n          color: \"#9CA3AF\",\r\n          border: \"1px solid #E5E7EB\",\r\n        }}\r\n      >\r\n        <span className=\"text-sm font-medium\">No data available</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Use fixed height and stable layout wrapper to prevent infinite resize loops\r\n  return (\r\n    <div\r\n      className={`rounded-2xl shadow-sm border border-gray-200 p-4 ${className}`}\r\n      style={{\r\n        backgroundColor: bgColor,\r\n        color: \"#111827\",\r\n        minHeight: height + 60, // padding + header buffer\r\n      }}\r\n    >\r\n      {title && (\r\n        <h2 className=\"text-lg font-semibold mb-4 text-center text-gray-200\">\r\n          {title}\r\n        </h2>\r\n      )}\r\n\r\n      <div className=\"w-full\" style={{ height }}>\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n          <LineChart data={data as any}>\r\n            <CartesianGrid stroke={gridColor} strokeDasharray=\"3 3\" />\r\n            <XAxis\r\n              dataKey={xKey}\r\n              tick={{ fill: \"#FFFFFF\" }}\r\n              axisLine={{ stroke: \"#D1D5DB\" }}\r\n            />\r\n            <YAxis\r\n              tick={{ fill: \"#FFFFFF\" }}\r\n              axisLine={{ stroke: \"#D1D5DB\" }}\r\n            />\r\n            {showTooltip && (\r\n              <Tooltip\r\n                contentStyle={{\r\n                  backgroundColor: \"#FFFFFF\",\r\n                  border: \"1px solid #E5E7EB\",\r\n                  borderRadius: 8,\r\n                  color: \"#111827\",\r\n                }}\r\n                labelStyle={{ color: \"#ebedf2\", fontWeight: 500 }}\r\n                cursor={{ stroke: \"#9CA3AF\", strokeWidth: 1 }}\r\n              />\r\n            )}\r\n            {showLegend && (\r\n              <Legend wrapperStyle={{ color: \"#4B5563\", fontSize: 12 }} />\r\n            )}\r\n\r\n            {lineKeys.map((key, index) => (\r\n              <Line\r\n                key={key}\r\n                type=\"monotone\"\r\n                dataKey={key}\r\n                stroke={colors[index % colors.length]}\r\n                strokeWidth={2}\r\n                dot={{ r: 3, fill: colors[index % colors.length] }}\r\n                activeDot={{ r: 5 }}\r\n                isAnimationActive={false}\r\n              />\r\n            ))}\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(LineChartComponent);\r\n",
      "type": "registry:block"
    }
  ]
}