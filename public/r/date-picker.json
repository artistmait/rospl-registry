{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-picker",
  "type": "registry:block",
  "title": "Date Picker",
  "description": "A nice Date Picker",
  "dependencies": [
    "lucide-react",
    "framer-motion",
    "date-fns"
  ],
  "files": [
    {
      "path": "src/registry/neutral/blocks/DatePicker.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport { format } from \"date-fns\";\r\nimport { CalendarIcon, ChevronLeft, ChevronRight } from \"lucide-react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\ninterface DatePickerProps {\r\n  onChange?: (date: string) => void;\r\n  className?: string;\r\n}\r\n\r\nexport default function DatePicker({ onChange, className = \"\" }: DatePickerProps) {\r\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [currentMonth, setCurrentMonth] = useState(new Date());\r\n  const [isYearDropdownOpen, setIsYearDropdownOpen] = useState(false);\r\n\r\n  const ref = useRef<HTMLDivElement>(null);\r\n\r\n  // Close dropdown on outside click\r\n  useEffect(() => {\r\n    const handleClickOutside = (e: MouseEvent) => {\r\n      if (ref.current && !ref.current.contains(e.target as Node)) {\r\n        setIsOpen(false);\r\n        setIsYearDropdownOpen(false);\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, []);\r\n\r\n  const handleDateClick = (date: Date) => {\r\n    setSelectedDate(date);\r\n    setIsOpen(false);\r\n    onChange?.(format(date, \"yyyy-MM-dd\"));\r\n  };\r\n\r\n  const handleMonthChange = (direction: \"prev\" | \"next\") => {\r\n    const newMonth = new Date(currentMonth);\r\n    newMonth.setMonth(newMonth.getMonth() + (direction === \"next\" ? 1 : -1));\r\n    setCurrentMonth(newMonth);\r\n  };\r\n\r\n  const handleYearSelect = (year: number) => {\r\n    const newDate = new Date(currentMonth);\r\n    newDate.setFullYear(year);\r\n    setCurrentMonth(newDate);\r\n    setIsYearDropdownOpen(false);\r\n  };\r\n\r\n  const getDaysInMonth = (date: Date) => {\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth();\r\n    const firstDay = new Date(year, month, 1);\r\n    const lastDay = new Date(year, month + 1, 0);\r\n    const days: Date[] = [];\r\n\r\n    for (let i = 0; i < firstDay.getDay(); i++) days.push(null as unknown as Date);\r\n    for (let i = 1; i <= lastDay.getDate(); i++) days.push(new Date(year, month, i));\r\n\r\n    return days;\r\n  };\r\n\r\n  const days = getDaysInMonth(currentMonth);\r\n  const weekdays = [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"];\r\n  const years = Array.from({ length: 100 }, (_, i) => new Date().getFullYear() - 50 + i); // +/-50 years\r\n\r\n  return (\r\n    <div ref={ref} className={`relative inline-block ${className}`}>\r\n      {/* Input Field */}\r\n      <Button\r\n        variant=\"outline\"\r\n        className=\"w-56 justify-between border-gray-300 bg-white text-gray-800 hover:bg-gray-50\"\r\n        onClick={() => setIsOpen((p) => !p)}\r\n      >\r\n        {format(selectedDate, \"PPP\")}\r\n        <CalendarIcon className=\"h-4 w-4 opacity-60\" />\r\n      </Button>\r\n\r\n      {/* Dropdown Calendar */}\r\n      <AnimatePresence>\r\n        {isOpen && (\r\n          <motion.div\r\n            initial={{ opacity: 0, scale: 0.95, y: 10 }}\r\n            animate={{ opacity: 1, scale: 1, y: 0 }}\r\n            exit={{ opacity: 0, scale: 0.95, y: 10 }}\r\n            transition={{ duration: 0.15 }}\r\n            className=\"absolute z-50 mt-2 w-72 rounded-xl border border-gray-200 bg-white shadow-xl p-4\"\r\n          >\r\n            {/* Month & Year Header */}\r\n            <div className=\"flex items-center justify-between mb-3 space-x-2\">\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"icon\"\r\n                onClick={() => handleMonthChange(\"prev\")}\r\n                className=\"hover:bg-gray-100\"\r\n              >\r\n                <ChevronLeft className=\"h-4 w-4\" />\r\n              </Button>\r\n\r\n              {/* Month */}\r\n              <span className=\"font-semibold text-gray-700\">{format(currentMonth, \"MMMM\")}</span>\r\n\r\n              {/* Year Dropdown */}\r\n              <div className=\"relative\">\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => setIsYearDropdownOpen((p) => !p)}\r\n                  className=\"text-gray-700 hover:bg-gray-100\"\r\n                >\r\n                  {currentMonth.getFullYear()}\r\n                </Button>\r\n                {isYearDropdownOpen && (\r\n                  <div className=\"absolute z-50 mt-1 max-h-40 w-24 overflow-y-auto rounded border border-gray-200 bg-white shadow-lg\">\r\n                    {years.map((year) => (\r\n                      <div\r\n                        key={year}\r\n                        className=\"cursor-pointer px-2 py-1 hover:bg-gray-100\"\r\n                        onClick={() => handleYearSelect(year)}\r\n                      >\r\n                        {year}\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"icon\"\r\n                onClick={() => handleMonthChange(\"next\")}\r\n                className=\"hover:bg-gray-100\"\r\n              >\r\n                <ChevronRight className=\"h-4 w-4\" />\r\n              </Button>\r\n            </div>\r\n\r\n            {/* Weekdays */}\r\n            <div className=\"grid grid-cols-7 text-center text-xs font-semibold text-gray-500 mb-2\">\r\n              {weekdays.map((day) => (\r\n                <div key={day}>{day}</div>\r\n              ))}\r\n            </div>\r\n\r\n            {/* Days */}\r\n            <div className=\"grid grid-cols-7 text-center gap-1\">\r\n              {days.map((day, i) =>\r\n                day ? (\r\n                  <button\r\n                    key={i}\r\n                    onClick={() => handleDateClick(day)}\r\n                    className={`h-9 w-9 rounded-full text-sm transition-colors\r\n                      ${\r\n                        format(day, \"yyyy-MM-dd\") === format(selectedDate, \"yyyy-MM-dd\")\r\n                          ? \"bg-black text-white\"\r\n                          : \"hover:bg-gray-100 text-gray-700\"\r\n                      }`}\r\n                  >\r\n                    {day.getDate()}\r\n                  </button>\r\n                ) : (\r\n                  <div key={i} />\r\n                )\r\n              )}\r\n            </div>\r\n\r\n            {/* Footer */}\r\n            <div className=\"flex justify-between mt-3 text-sm text-gray-600\">\r\n              <button\r\n                onClick={() => {\r\n                  const today = new Date();\r\n                  setSelectedDate(today);\r\n                  setCurrentMonth(today);\r\n                  onChange?.(format(today, \"yyyy-MM-dd\"));\r\n                }}\r\n                className=\"hover:text-black\"\r\n              >\r\n                Today\r\n              </button>\r\n              <button\r\n                onClick={() => setSelectedDate(new Date())}\r\n                className=\"hover:text-black\"\r\n              >\r\n                Clear\r\n              </button>\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:block"
    }
  ]
}