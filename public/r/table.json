{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "table",
  "type": "registry:block",
  "title": "Table",
  "description": "A nice Table",
  "dependencies": [],
  "files": [
    {
      "path": "src/registry/neutral/blocks/DataTable.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, { useState, useMemo } from \"react\";\r\n\r\nexport interface Column<T> {\r\n  key: keyof T;\r\n  header: string;\r\n  render?: (value: any, row: T) => React.ReactNode;\r\n  sortable?: boolean;\r\n  className?: string;\r\n}\r\n\r\ninterface TableProps<T> {\r\n  data: T[];\r\n  columns: Column<T>[];\r\n  searchPlaceholder?: string;\r\n  itemsPerPageOptions?: number[];\r\n  defaultItemsPerPage?: number;\r\n  className?: string;\r\n}\r\n\r\nexport default function Table<T extends Record<string, any>>({\r\n  data,\r\n  columns,\r\n  searchPlaceholder = \"Search...\",\r\n  itemsPerPageOptions = [5, 10, 20, 50],\r\n  defaultItemsPerPage = 10,\r\n  className = \"\",\r\n}: TableProps<T>) {\r\n  const [sortConfig, setSortConfig] = useState<{\r\n    key: keyof T | null;\r\n    direction: \"asc\" | \"desc\";\r\n  }>({ key: null, direction: \"asc\" });\r\n\r\n  const [search, setSearch] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [itemsPerPage, setItemsPerPage] = useState(defaultItemsPerPage);\r\n\r\n  // üîç Filtering\r\n  const filteredData = useMemo(() => {\r\n    if (!search.trim()) return data;\r\n    return data.filter((row) =>\r\n      Object.values(row).some((value) =>\r\n        String(value).toLowerCase().includes(search.toLowerCase())\r\n      )\r\n    );\r\n  }, [data, search]);\r\n\r\n  // üîΩ Sorting\r\n  const sortedData = useMemo(() => {\r\n    if (!sortConfig.key) return filteredData;\r\n    return [...filteredData].sort((a, b) => {\r\n      const valA = a[sortConfig.key!];\r\n      const valB = b[sortConfig.key!];\r\n      if (valA < valB) return sortConfig.direction === \"asc\" ? -1 : 1;\r\n      if (valA > valB) return sortConfig.direction === \"asc\" ? 1 : -1;\r\n      return 0;\r\n    });\r\n  }, [filteredData, sortConfig]);\r\n\r\n  // üìë Pagination\r\n  const totalPages = Math.ceil(sortedData.length / itemsPerPage);\r\n  const paginatedData = useMemo(() => {\r\n    const start = (page - 1) * itemsPerPage;\r\n    return sortedData.slice(start, start + itemsPerPage);\r\n  }, [sortedData, page, itemsPerPage]);\r\n\r\n  const handleSort = (key: keyof T) => {\r\n    setSortConfig((prev) =>\r\n      prev.key === key\r\n        ? { key, direction: prev.direction === \"asc\" ? \"desc\" : \"asc\" }\r\n        : { key, direction: \"asc\" }\r\n    );\r\n  };\r\n\r\n  const handlePageChange = (newPage: number) => {\r\n    if (newPage >= 1 && newPage <= totalPages) setPage(newPage);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`w-full overflow-hidden rounded-2xl border border-gray-200 bg-white shadow-md ${className}`}\r\n    >\r\n      {/* üîç Search + Controls */}\r\n      <div className=\"flex flex-wrap items-center justify-between gap-4 px-4 py-3 bg-gray-50 border-b border-gray-200\">\r\n        <input\r\n          type=\"text\"\r\n          value={search}\r\n          onChange={(e) => {\r\n            setSearch(e.target.value);\r\n            setPage(1);\r\n          }}\r\n          placeholder={searchPlaceholder}\r\n          className=\"w-64 rounded-md border border-gray-300 bg-white px-3 py-2 text-sm text-gray-800 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-300\"\r\n        />\r\n\r\n        <div className=\"flex items-center gap-3 text-gray-600 text-sm\">\r\n          <span>Rows per page:</span>\r\n          <select\r\n            value={itemsPerPage}\r\n            onChange={(e) => {\r\n              setItemsPerPage(Number(e.target.value));\r\n              setPage(1);\r\n            }}\r\n            className=\"rounded-md border border-gray-300 bg-white px-2 py-1 text-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-300\"\r\n          >\r\n            {itemsPerPageOptions.map((num) => (\r\n              <option key={num} value={num}>\r\n                {num}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      {/* üßæ Table */}\r\n      <table className=\"w-full border-collapse text-sm text-gray-700\">\r\n        <thead>\r\n          <tr className=\"bg-gray-100 text-gray-700 uppercase text-xs tracking-wider\">\r\n            {columns.map((col) => (\r\n              <th\r\n                key={String(col.key)}\r\n                className={`px-4 py-3 font-semibold text-left ${col.className || \"\"} ${\r\n                  col.sortable\r\n                    ? \"cursor-pointer select-none hover:text-gray-900\"\r\n                    : \"\"\r\n                }`}\r\n                onClick={() => col.sortable && handleSort(col.key)}\r\n              >\r\n                <div className=\"flex items-center gap-1\">\r\n                  {col.header}\r\n                  {col.sortable && sortConfig.key === col.key && (\r\n                    <span className=\"text-gray-500 text-xs\">\r\n                      {sortConfig.direction === \"asc\" ? \"‚ñ≤\" : \"‚ñº\"}\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {paginatedData.length === 0 ? (\r\n            <tr>\r\n              <td\r\n                colSpan={columns.length}\r\n                className=\"py-6 text-center text-gray-500\"\r\n              >\r\n                No data found\r\n              </td>\r\n            </tr>\r\n          ) : (\r\n            paginatedData.map((row, i) => (\r\n              <tr\r\n                key={i}\r\n                className={`transition-colors ${\r\n                  i % 2 === 0 ? \"bg-gray-50\" : \"bg-white\"\r\n                } hover:bg-gray-100`}\r\n              >\r\n                {columns.map((col) => (\r\n                  <td\r\n                    key={String(col.key)}\r\n                    className={`px-4 py-3 ${col.className || \"\"}`}\r\n                  >\r\n                    {col.render\r\n                      ? col.render(row[col.key], row)\r\n                      : String(row[col.key] ?? \"\")}\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))\r\n          )}\r\n        </tbody>\r\n      </table>\r\n\r\n      {/* üìÑ Pagination */}\r\n      <div className=\"flex items-center justify-between px-4 py-3 border-t border-gray-200 bg-gray-50 text-gray-600 text-sm\">\r\n        <span>\r\n          Page {page} of {totalPages || 1}\r\n        </span>\r\n\r\n        <div className=\"flex items-center gap-2\">\r\n          <button\r\n            onClick={() => handlePageChange(page - 1)}\r\n            disabled={page === 1}\r\n            className=\"rounded-md px-3 py-1 border border-gray-300 bg-white hover:bg-gray-100 disabled:opacity-40\"\r\n          >\r\n            Prev\r\n          </button>\r\n          <button\r\n            onClick={() => handlePageChange(page + 1)}\r\n            disabled={page === totalPages || totalPages === 0}\r\n            className=\"rounded-md px-3 py-1 border border-gray-300 bg-white hover:bg-gray-100 disabled:opacity-40\"\r\n          >\r\n            Next\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:block"
    }
  ]
}